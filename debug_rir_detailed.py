#!/usr/bin/env python3
"""
Debug detalhado do problema de extra√ß√£o RIR
"""

import re


def debug_rir_extraction():
    """Debug detalhado para entender o problema"""
    print("=== DEBUG DETALHADO RIR ===")
    print()

    # Texto exato do log do usu√°rio
    text = "Item do Crit√©rio de Medi√ß√£o:  3.1.1.1 C√≥digo da disciplina:  TUB C√≥digo do Relat√≥rio:  RIR TAG:  V4540N0SBC-00-NN-014-UCR-01 Relat√≥rio:  CZ6_5290.00_22212_3.1.1_TUB_RIR-TAG - RELAT√ìRIO DE INSPE√á√ÉO DE ..."

    print("üìÑ TEXTO COMPLETO:")
    print(f"'{text}'")
    print()

    # Encontrar a posi√ß√£o exata de "Relat√≥rio:"
    relatorio_pos = text.find("Relat√≥rio:")
    if relatorio_pos >= 0:
        print(f"üìç 'Relat√≥rio:' encontrado na posi√ß√£o: {relatorio_pos}")

        # Mostrar contexto ao redor
        start = max(0, relatorio_pos - 20)
        end = min(len(text), relatorio_pos + 60)
        context = text[start:end]
        print(f"üîç Contexto: '{context}'")

        # Mostrar os pr√≥ximos 50 caracteres ap√≥s "Relat√≥rio:"
        after_relatorio = text[relatorio_pos + 10 : relatorio_pos + 60]
        print(f"‚û°Ô∏è Ap√≥s 'Relat√≥rio:': '{after_relatorio}'")

        # Analisar caractere por caractere
        print("\nüìù AN√ÅLISE CARACTERE POR CARACTERE (ap√≥s 'Relat√≥rio:'):")
        for i, char in enumerate(after_relatorio[:20]):
            if char == " ":
                print(f"   {i:2d}: [ESPA√áO]")
            elif char == "\t":
                print(f"   {i:2d}: [TAB]")
            elif char == "\n":
                print(f"   {i:2d}: [QUEBRA]")
            elif char == "\r":
                print(f"   {i:2d}: [RETURN]")
            else:
                print(f"   {i:2d}: '{char}'")

    print("\n" + "=" * 50)
    print("üß™ TESTE DE M√öLTIPLOS PADR√ïES:")
    print("=" * 50)

    patterns = [
        # Padr√£o atual
        (
            r"Relat√≥rio:\s*([A-Z0-9_\.\-\s]+?)(?:\s*-|\s*$|\r|\n)",
            "Atual (problem√°tico)",
        ),
        # Varia√ß√µes mais espec√≠ficas
        (r"Relat√≥rio:\s+([A-Z0-9_\.]+(?:[A-Z0-9_\.\-]+)*)", "Sem espa√ßos internos"),
        (
            r"Relat√≥rio:\s*([A-Z0-9_\.\-]+(?:\s+[A-Z0-9_\.\-]+)*)",
            "Com espa√ßos opcionais",
        ),
        (r"Relat√≥rio:\s*([^-\n\r]+?)(?:\s*-|\s*$)", "Qualquer coisa at√© h√≠fen"),
        (r"Relat√≥rio:\s*([A-Z0-9_\.\-\s]*?)(?:-TAG|\s*-|\s*$)", "Espec√≠fico para TAG"),
        (r"Relat√≥rio:\s*([A-Z0-9_\.\-]+(?:_[A-Z0-9_\.\-]+)*)", "Underscores separados"),
        (r"Relat√≥rio:\s*([A-Z0-9_\.\-]{3,})", "M√≠nimo 3 caracteres simples"),
        (
            r"Relat√≥rio:\s*([A-Z0-9_\.\-\s]+?)(?:-[A-Z]|\s*-|\s*$)",
            "Para antes de h√≠fen+letra",
        ),
    ]

    for pattern, description in patterns:
        print(f"\nüîç {description}:")
        print(f"   Padr√£o: {pattern}")

        try:
            match = re.search(pattern, text, re.IGNORECASE | re.MULTILINE)
            if match:
                result = match.group(1).strip()
                print(f"   ‚úÖ Resultado: '{result}' ({len(result)} chars)")
            else:
                print(f"   ‚ùå Nenhuma correspond√™ncia")
        except Exception as e:
            print(f"   ‚ùå Erro no regex: {e}")


def test_expected_patterns():
    """Testa padr√µes com diferentes formatos esperados"""
    print("\n" + "=" * 50)
    print("üéØ TESTE COM FORMATOS ESPERADOS:")
    print("=" * 50)

    # Diferentes possibilidades baseadas no texto
    test_texts = [
        "Relat√≥rio:  CZ6_5290.00_22212_3.1.1_TUB_RIR-TAG - DESCRI√á√ÉO",
        "Relat√≥rio: CZ6_5290.00_22212_3.1.1_TUB_RIR-TAG",
        "Relat√≥rio:CZ6_5290.00_22212_3.1.1_TUB_RIR-TAG",
        # O texto real do usu√°rio
        "Item do Crit√©rio de Medi√ß√£o:  3.1.1.1 C√≥digo da disciplina:  TUB C√≥digo do Relat√≥rio:  RIR TAG:  V4540N0SBC-00-NN-014-UCR-01 Relat√≥rio:  CZ6_5290.00_22212_3.1.1_TUB_RIR-TAG - RELAT√ìRIO DE INSPE√á√ÉO DE ...",
    ]

    # Padr√£o que deve funcionar
    best_pattern = r"Relat√≥rio:\s*([A-Z0-9_\.\-]+(?:_[A-Z0-9_\.\-]+)*)"

    print(f"üìã Padr√£o testado: {best_pattern}")
    print()

    for i, test_text in enumerate(test_texts, 1):
        print(f"üß™ Teste {i}: '{test_text[:60]}...'")
        match = re.search(best_pattern, test_text, re.IGNORECASE | re.MULTILINE)
        if match:
            result = match.group(1).strip()
            print(f"   ‚úÖ Capturou: '{result}'")
        else:
            print(f"   ‚ùå N√£o capturou")
        print()


if __name__ == "__main__":
    print("üêõ DEBUG DETALHADO DO PROBLEMA RIR")
    print("=" * 60)

    debug_rir_extraction()
    test_expected_patterns()

    print("\nüìã CONCLUS√ïES:")
    print("1. Analisar a estrutura exata do texto")
    print("2. Identificar o padr√£o correto baseado no contexto")
    print("3. Testar o novo padr√£o antes de aplicar")
    print("4. Considerar varia√ß√µes de formata√ß√£o")
