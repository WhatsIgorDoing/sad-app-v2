import sys

sys.path.insert(0, "src")

import tempfile
from pathlib import Path
from unittest.mock import MagicMock

# Simular customtkinter
sys.modules["customtkinter"] = MagicMock()

from sad_app_v2.core.domain import DocumentFile, DocumentStatus, ManifestItem
from sad_app_v2.presentation.view_controller import ViewController


def test_both_rir_methods():
    print("=== TESTE - AMBOS OS M√âTODOS RIR ===")

    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)

        # Configurar controller
        controller = ViewController("test_extractor")

        # Mock do extrator
        mock_extractor = MagicMock()
        mock_extractor.extract_text.return_value = """
RELAT√ìRIO DE INSPE√á√ÉO POR RISCO - RIR

Relat√≥rio: CZ6_RNEST_U22_3.1.1.1_CVL_RIR_B-22026A

Data: 29/09/2025
        """
        controller.extractor_service = mock_extractor

        # Mock da view
        mock_view = MagicMock()
        controller.view = mock_view

        # Manifesto
        controller.all_manifest_items = [
            ManifestItem("CZ6_RNEST_U22_3.1.1.1_CVL_RIR_B-22026A", "B", "RIR Teste")
        ]

        # TESTE 1: M√©todo espec√≠fico (üîç RIR)
        print("\nüîç TESTE 1 - M√âTODO ESPEC√çFICO:")
        test_file1 = temp_path / "teste_especifico.pdf"
        test_file1.write_text("arquivo simulado")

        doc_file1 = DocumentFile(test_file1, 1000)
        controller.unrecognized_files = [doc_file1]
        controller.validated_files = []

        controller._run_rir_resolution(doc_file1)

        expected_name1 = "CZ6_RNEST_U22_3.1.1.1_CVL_RIR_B-22026A_B.pdf"
        expected_path1 = temp_path / expected_name1

        print(f"   Arquivo original: teste_especifico.pdf")
        print(f"   Nome esperado: {expected_name1}")
        print(f"   Arquivo renomeado existe: {expected_path1.exists()}")
        print(
            f"   ‚úÖ M√©todo espec√≠fico: {'FUNCIONOU' if expected_path1.exists() else 'FALHOU'}"
        )

        # TESTE 2: M√©todo gen√©rico (RIR do YAML)
        print("\nüìã TESTE 2 - M√âTODO GEN√âRICO:")
        test_file2 = temp_path / "teste_generico.pdf"
        test_file2.write_text("arquivo simulado")

        doc_file2 = DocumentFile(test_file2, 1000)
        controller.unrecognized_files = [doc_file2]

        # Simular que resolved_file tem associated_manifest_item (como retornado pelo use case)
        resolved_file_mock = DocumentFile(test_file2, 1000)
        resolved_file_mock.associated_manifest_item = controller.all_manifest_items[0]
        resolved_file_mock.status = DocumentStatus.VALIDATED

        # Mock do use case para retornar arquivo com manifest item
        mock_use_case = MagicMock()
        mock_use_case.execute.return_value = resolved_file_mock

        # Patch tempor√°rio do use case
        with tempfile.TemporaryDirectory():
            # Executar m√©todo gen√©rico com perfil "RIR"
            controller._run_resolution(doc_file2, "RIR")

            expected_name2 = "CZ6_RNEST_U22_3.1.1.1_CVL_RIR_B-22026A_B.pdf"
            expected_path2 = temp_path / expected_name2

            print(f"   Arquivo original: teste_generico.pdf")
            print(f"   Nome esperado: {expected_name2}")
            print(f"   Arquivo renomeado existe: {expected_path2.exists()}")
            print(
                f"   ‚úÖ M√©todo gen√©rico: {'FUNCIONOU' if expected_path2.exists() else 'FALHOU'}"
            )

        # TESTE 3: Verificar que perfil PID n√£o renomeia
        print("\nüîß TESTE 3 - PERFIL PID (SEM RENOMEA√á√ÉO):")
        test_file3 = temp_path / "teste_pid.pdf"
        test_file3.write_text("arquivo simulado")

        doc_file3 = DocumentFile(test_file3, 1000)
        controller.unrecognized_files = [doc_file3]

        try:
            controller._run_resolution(doc_file3, "PID")

            # Arquivo original deve ainda existir (sem renomea√ß√£o)
            print(f"   Arquivo original ainda existe: {test_file3.exists()}")
            print(
                f"   ‚úÖ Perfil PID: {'CORRETO (sem renomea√ß√£o)' if test_file3.exists() else 'FALHOU'}"
            )
        except Exception as e:
            print(f"   ‚ö†Ô∏è Perfil PID falhou (esperado): {e}")

        return expected_path1.exists()


def test_combobox_options():
    """Testa as op√ß√µes dispon√≠veis no ComboBox"""
    print("\n=== TESTE - OP√á√ïES DO COMBOBOX ===")

    # Simular MainView
    sys.modules["customtkinter"] = MagicMock()
    from sad_app_v2.presentation.main_view import MainView

    with tempfile.TemporaryDirectory():
        mock_view = MagicMock()
        mock_combobox = MagicMock()
        mock_view.profile_combobox = mock_combobox

        # Simular perfis carregados do YAML
        yaml_profiles = ["RIR", "PID", "GERAL"]

        # Chamar m√©todo que popula ComboBox
        view = MainView()
        view.profile_combobox = mock_combobox
        view.populate_profiles_dropdown(yaml_profiles)

        # Verificar chamadas
        if mock_combobox.configure.called:
            call_args = mock_combobox.configure.call_args
            values = call_args[1]["values"]  # kwargs['values']

            print(f"üìã Op√ß√µes no ComboBox:")
            for i, option in enumerate(values):
                print(f"   {i + 1}. {option}")

            print(f"\nüîç An√°lise:")
            has_special_rir = any("üîç RIR" in option for option in values)
            has_yaml_rir = "RIR" in values

            print(f"   Tem op√ß√£o especial 'üîç RIR': {has_special_rir}")
            print(f"   Tem op√ß√£o YAML 'RIR': {has_yaml_rir}")

            if has_special_rir and has_yaml_rir:
                print("   ‚ö†Ô∏è PROBLEMA: Duas op√ß√µes RIR diferentes!")
                print("   üí° Usu√°rio pode confundir e selecionar a errada")
                return True
            else:
                print("   ‚úÖ Configura√ß√£o parece OK")
                return False


if __name__ == "__main__":
    print("üß™ TESTANDO AMBOS OS M√âTODOS RIR\n")

    test1_success = test_both_rir_methods()
    has_duplicate_options = test_combobox_options()

    print(f"\nüéØ RESULTADOS:")
    print(f"   M√©todos RIR funcionando: {'‚úÖ' if test1_success else '‚ùå'}")
    print(
        f"   Op√ß√µes duplicadas no ComboBox: {'‚ö†Ô∏è Sim' if has_duplicate_options else '‚úÖ N√£o'}"
    )

    if has_duplicate_options:
        print(f"\nüí° RECOMENDA√á√ÉO:")
        print(f"   Remover perfil 'RIR' do YAML ou da op√ß√£o especial")
        print(f"   para evitar confus√£o do usu√°rio")

    print(
        f"\nüéâ CONCLUS√ÉO: {'Sistema funcionando' if test1_success else 'Necessita ajustes'}"
    )
