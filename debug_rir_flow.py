#!/usr/bin/env python3
"""
Debug script para testar o fluxo completo de RIR
"""

import re
from pathlib import Path

# Simula√ß√£o do texto extra√≠do de um documento RIR
SAMPLE_RIR_TEXT = """
RELAT√ìRIO DE INSPE√á√ÉO POR RISCO - RIR

Relat√≥rio: CZ6_RNEST_U22_3.1.1.1_TUB_RIR_V2960Q0R9B-00-JJ-017-UCR-02
Data: 29/09/2025
Inspetor: Jo√£o Silva

Este relat√≥rio apresenta os resultados da inspe√ß√£o...
"""


def test_rir_extraction():
    """Testa a extra√ß√£o de nome RIR do texto"""
    print("=== TESTE DE EXTRA√á√ÉO RIR ===")
    print(f"üìÑ Texto de exemplo:")
    print(SAMPLE_RIR_TEXT[:200] + "...")
    print()

    # Teste do padr√£o atual
    pattern = r"Relat√≥rio:\s*([A-Z0-9_\.\-]+)"
    match = re.search(pattern, SAMPLE_RIR_TEXT, re.IGNORECASE | re.MULTILINE)

    print(f"üîç Padr√£o testado: {pattern}")
    if match:
        extracted_name = match.group(1).strip()
        print(f"‚úÖ Nome extra√≠do: '{extracted_name}'")
        print(f"üìè Comprimento: {len(extracted_name)}")

        # Simular gera√ß√£o do nome do arquivo
        revision = "A"  # Exemplo de revis√£o
        file_extension = ".pdf"
        new_filename = f"{extracted_name}_{revision}{file_extension}"

        print(f"üìÅ Nome do arquivo resultante: '{new_filename}'")
        print(f"üìè Comprimento do nome: {len(new_filename)}")

        return extracted_name
    else:
        print("‚ùå Nenhum nome extra√≠do!")
        return None


def test_use_case_logic():
    """Simula a l√≥gica do use case para RIR"""
    print("\n=== TESTE L√ìGICA USE CASE ===")

    # Simular perfis do patterns.yaml
    profiles = {
        "RIR": {
            "patterns": [
                r"Relat√≥rio:\s*([A-Z0-9_\.\-]+)",
                r"C√≥digo:\s*([A-Z0-9_\.\-]+)",
                r"([A-Z0-9]+_[A-Z0-9]+_[A-Z0-9]+_[\d\.]+_[A-Z]+_RIR_[A-Z0-9\-]+)",
            ]
        }
    }

    def find_code(text: str, profile_id: str):
        """Simula o m√©todo find_code do ProfiledExtractorService"""
        profile = profiles.get(profile_id)
        if not profile or not text:
            return None

        patterns = profile.get("patterns", [])
        for i, pattern in enumerate(patterns):
            print(f"   üîç Testando padr√£o {i + 1}: {pattern}")
            match = re.search(pattern, text, re.IGNORECASE | re.MULTILINE)
            if match:
                result = match.group(1) if match.groups() else match.group(0)
                print(f"   ‚úÖ Encontrado: '{result}'")
                return result
            else:
                print(f"   ‚ùå N√£o encontrado")

        return None

    # Testar extra√ß√£o
    found_code = find_code(SAMPLE_RIR_TEXT, "RIR")

    if found_code:
        print(f"\nüéØ C√≥digo encontrado pelo use case: '{found_code}'")

        # Simular sanitiza√ß√£o
        sanitized_code = re.sub(r"_[A-Z0-9]$", "", found_code, flags=re.IGNORECASE)
        print(f"üßπ C√≥digo sanitizado: '{sanitized_code}'")

        return found_code
    else:
        print("\n‚ùå Nenhum c√≥digo encontrado pelo use case!")
        return None


def test_fallback_logic():
    """Testa a l√≥gica de fallback no view_controller"""
    print("\n=== TESTE L√ìGICA FALLBACK ===")

    # Se o use case n√£o encontrou, vamos para fallback
    found_code = test_use_case_logic()

    if not found_code:
        print("‚ö†Ô∏è  Use case falhou, tentando fallback manual...")

        # Fallback: busca direta por "Relat√≥rio:"
        pattern = r"Relat√≥rio:\s*([A-Z0-9_\.\-]+)"
        match = re.search(pattern, SAMPLE_RIR_TEXT, re.IGNORECASE | re.MULTILINE)

        if match:
            extracted_name = match.group(1).strip()
            print(f"‚úÖ Fallback encontrou: '{extracted_name}'")
            return extracted_name
        else:
            print("‚ùå Fallback tamb√©m falhou!")
            return None
    else:
        print("‚úÖ Use case funcionou, n√£o precisa de fallback")
        return found_code


if __name__ == "__main__":
    print("üöÄ INICIANDO DEBUG DO FLUXO RIR")
    print("=" * 50)

    # Teste 1: Extra√ß√£o direta
    direct_result = test_rir_extraction()

    # Teste 2: L√≥gica do use case
    use_case_result = test_use_case_logic()

    # Teste 3: L√≥gica de fallback
    fallback_result = test_fallback_logic()

    print("\n" + "=" * 50)
    print("üìä RESUMO DOS RESULTADOS:")
    print(
        f"   Extra√ß√£o direta: {'‚úÖ' if direct_result else '‚ùå'} {direct_result or 'Falhou'}"
    )
    print(
        f"   Use case:        {'‚úÖ' if use_case_result else '‚ùå'} {use_case_result or 'Falhou'}"
    )
    print(
        f"   Fallback:        {'‚úÖ' if fallback_result else '‚ùå'} {fallback_result or 'Falhou'}"
    )

    if direct_result and use_case_result and direct_result == use_case_result:
        print("\nüéâ TUDO FUNCIONANDO CORRETAMENTE!")
    else:
        print("\n‚ö†Ô∏è  H√Å DIFEREN√áAS NO COMPORTAMENTO!")
